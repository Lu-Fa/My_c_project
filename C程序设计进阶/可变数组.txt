#include"array.h"
/*
#ifndef _ARRAY_H_
#define _ARRAY_H_

typedef struct 
{
	int *array;
	int size;
}Array;
Array array_creat(int init_size);
void array_free(Array *a);
int array_size(const Array *a);
int *array_at(Array *a, int index);
void array_inflate(Array *a, int more_size);
#endif 
*/
#include<stdio.h>
#include<stdlib.h>
const Block =3;
Array array_creat(int init_size)
{
	Array a;
	a.size = init_size;
	a.array = (int*)malloc(a.size*sizeof(int));
	return a;
}

void array_free(Array *a)
{
	free(a->array);
	a->size = 0;
	a->array=NULL;
}
int array_size(const Array *a)
{
	return a->size;
}
int *array_at(Array *a, int index)
{
	if (index >=a->size)
	{
		array_inflate(a,(index/Block+1)*Block-a->size);
	}
	return &(a->array[index]);
}
int array_get(const Array *a, int index)
{
	return a->array[index];
}
int array_set(Array *a, int index,int value)
{
	 a->array[index]=value;
}
void array_inflate(Array *a, int more_size)
{
	int  *p;
	p = (int*)malloc((a->size+more_size)*sizeof(int));
	for (int i = 0; i <a->size; i++)
	{
		p[i] = a->array[i];
	}
	free(a->array);
	a->array = p;
	a->size += more_size;
}
int main()
{
	Array ar=array_creat(5);
	int cnt = 0,number=0;
	while (number!=-1)
	{
		if(number!=-1)
		   scanf_s("%d",&number);
		*array_at(&ar, cnt++) = number;
	}
	for (int i = 0; i < ar.size; i++)
	   printf("a[%d]=%d\n", i,array_get(&ar, i));
	array_free(&ar);
	array_size(&ar);
	return 0;
}